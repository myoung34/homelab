esphome:
  name: bluey
  platformio_options:
    board_build.f_flash: 40000000L
    board_build.flash_mode: dio
    board_build.flash_size: 4MB

esp32:
  variant: ESP32C3
  board: esp32-c3-devkitm-1
  framework:
    type: esp-idf

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: !secret wifi_domain
  on_connect:
    - uart.write: "Connnected to wifi#"
    - esp32_ble_tracker.start_scan:
        continuous: true
  on_disconnect:
    - uart.write: "Disconnnected from wifi#"
    - esp32_ble_tracker.stop_scan:

logger:
  level: DEBUG

api:
  encryption:
    key: !secret bluey_key

ota:
  password: !secret ota_password

web_server:

#bluetooth_proxy:

uart:
  tx_pin: 7
  rx_pin: 6
  baud_rate: 38400

text_sensor:
  - platform: template
    name: "color"
    id: tilt_color
    filters:
      - substitute:
        - "DE742DF0-7013-12B5-444B-B1C560BB95A4 -> blue"
  - platform: template
    name: "uuid"
    id: tilt_uuid
    filters:
      - substitute:
        - "DE742DF0-7013-12B5-444B-B1C560BB95A4 -> a495bb60c5b14b44b5121370f02d74de"

sensor:
  - platform: template
    name: "temperature"
    id: tilt_temp
  - platform: template
    name: "gravity"
    id: tilt_gravity
  - platform: template
    name: "tx power"
    id: tilt_txpower

esp32_ble_tracker:
  scan_parameters:
    continuous: false
  on_ble_advertise:
    - mac_address:
        - E7:81:F2:0C:DE:44 #blue
      then:
        - lambda: |-
            auto ibeacon = x.get_ibeacon().value();
            id(tilt_temp).publish_state(ibeacon.get_major());
            id(tilt_gravity).publish_state(ibeacon.get_minor());
            id(tilt_txpower).publish_state(ibeacon.get_signal_power());
            id(tilt_color).publish_state(ibeacon.get_uuid().to_string());
            id(tilt_uuid).publish_state(ibeacon.get_uuid().to_string());
        - uart.write: !lambda
                          char buf[128];
                          sprintf(buf,  "%s,%.1f,%.1f#\0",id(tilt_color).state.c_str(), id(tilt_temp).state, id(tilt_gravity).state);
                          std::string s = buf;
                          return std::vector<unsigned char>( s.begin(), s.end() );
